// Code generated by "enumer -type=CUpti_ReadEventFlags -json"; DO NOT EDIT

package cupti

import (
	"encoding/json"
	"fmt"
)

const (
	_CUpti_ReadEventFlags_name_0 = "CUPTI_EVENT_READ_FLAG_NONE"
	_CUpti_ReadEventFlags_name_1 = "CUPTI_EVENT_READ_FLAG_FORCE_INT"
)

var (
	_CUpti_ReadEventFlags_index_0 = [...]uint8{0, 26}
	_CUpti_ReadEventFlags_index_1 = [...]uint8{0, 31}
)

func (i CUpti_ReadEventFlags) String() string {
	switch {
	case i == 0:
		return _CUpti_ReadEventFlags_name_0
	case i == 2147483647:
		return _CUpti_ReadEventFlags_name_1
	default:
		return fmt.Sprintf("CUpti_ReadEventFlags(%d)", i)
	}
}

var _CUpti_ReadEventFlagsNameToValue_map = map[string]CUpti_ReadEventFlags{
	_CUpti_ReadEventFlags_name_0[0:26]: 0,
	_CUpti_ReadEventFlags_name_1[0:31]: 2147483647,
}

func CUpti_ReadEventFlagsString(s string) (CUpti_ReadEventFlags, error) {
	if val, ok := _CUpti_ReadEventFlagsNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_ReadEventFlags values", s)
}

func (i CUpti_ReadEventFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CUpti_ReadEventFlags) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_ReadEventFlags should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_ReadEventFlagsString(s)
	return err
}
