// Code generated by "enumer -type=CUpti_ActivityMemcpyKind -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_CUpti_ActivityMemcpyKindName_0 = "CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWNCUPTI_ACTIVITY_MEMCPY_KIND_HTODCUPTI_ACTIVITY_MEMCPY_KIND_DTOHCUPTI_ACTIVITY_MEMCPY_KIND_HTOACUPTI_ACTIVITY_MEMCPY_KIND_ATOHCUPTI_ACTIVITY_MEMCPY_KIND_ATOACUPTI_ACTIVITY_MEMCPY_KIND_ATODCUPTI_ACTIVITY_MEMCPY_KIND_DTOACUPTI_ACTIVITY_MEMCPY_KIND_DTODCUPTI_ACTIVITY_MEMCPY_KIND_HTOHCUPTI_ACTIVITY_MEMCPY_KIND_PTOP"
	_CUpti_ActivityMemcpyKindName_1 = "CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INT"
)

var (
	_CUpti_ActivityMemcpyKindIndex_0 = [...]uint16{0, 34, 65, 96, 127, 158, 189, 220, 251, 282, 313, 344}
	_CUpti_ActivityMemcpyKindIndex_1 = [...]uint8{0, 36}
)

func (i CUpti_ActivityMemcpyKind) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _CUpti_ActivityMemcpyKindName_0[_CUpti_ActivityMemcpyKindIndex_0[i]:_CUpti_ActivityMemcpyKindIndex_0[i+1]]
	case i == 2147483647:
		return _CUpti_ActivityMemcpyKindName_1
	default:
		return fmt.Sprintf("CUpti_ActivityMemcpyKind(%d)", i)
	}
}

var _CUpti_ActivityMemcpyKindValues = []CUpti_ActivityMemcpyKind{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2147483647}

var _CUpti_ActivityMemcpyKindNameToValueMap = map[string]CUpti_ActivityMemcpyKind{
	_CUpti_ActivityMemcpyKindName_0[0:34]:    0,
	_CUpti_ActivityMemcpyKindName_0[34:65]:   1,
	_CUpti_ActivityMemcpyKindName_0[65:96]:   2,
	_CUpti_ActivityMemcpyKindName_0[96:127]:  3,
	_CUpti_ActivityMemcpyKindName_0[127:158]: 4,
	_CUpti_ActivityMemcpyKindName_0[158:189]: 5,
	_CUpti_ActivityMemcpyKindName_0[189:220]: 6,
	_CUpti_ActivityMemcpyKindName_0[220:251]: 7,
	_CUpti_ActivityMemcpyKindName_0[251:282]: 8,
	_CUpti_ActivityMemcpyKindName_0[282:313]: 9,
	_CUpti_ActivityMemcpyKindName_0[313:344]: 10,
	_CUpti_ActivityMemcpyKindName_1[0:36]:    2147483647,
}

// CUpti_ActivityMemcpyKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUpti_ActivityMemcpyKindString(s string) (CUpti_ActivityMemcpyKind, error) {
	if val, ok := _CUpti_ActivityMemcpyKindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_ActivityMemcpyKind values", s)
}

// CUpti_ActivityMemcpyKindValues returns all values of the enum
func CUpti_ActivityMemcpyKindValues() []CUpti_ActivityMemcpyKind {
	return _CUpti_ActivityMemcpyKindValues
}

// IsACUpti_ActivityMemcpyKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUpti_ActivityMemcpyKind) IsACUpti_ActivityMemcpyKind() bool {
	for _, v := range _CUpti_ActivityMemcpyKindValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUpti_ActivityMemcpyKind
func (i CUpti_ActivityMemcpyKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUpti_ActivityMemcpyKind
func (i *CUpti_ActivityMemcpyKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_ActivityMemcpyKind should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_ActivityMemcpyKindString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUpti_ActivityMemcpyKind
func (i CUpti_ActivityMemcpyKind) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUpti_ActivityMemcpyKind
func (i *CUpti_ActivityMemcpyKind) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUpti_ActivityMemcpyKindString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUpti_ActivityMemcpyKind
func (i CUpti_ActivityMemcpyKind) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUpti_ActivityMemcpyKind
func (i *CUpti_ActivityMemcpyKind) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUpti_ActivityMemcpyKindString(s)
	return err
}

func (i CUpti_ActivityMemcpyKind) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUpti_ActivityMemcpyKind) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUpti_ActivityMemcpyKindString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
