// Code generated by "enumer -type=CUDAError -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const (
	_CUDAError_name_0 = "CUDASuccessCUDAErrorMissingConfigurationCUDAErrorMemoryAllocationCUDAErrorInitializationErrorCUDAErrorLaunchFailureCUDAErrorPriorLaunchFailureCUDAErrorLaunchTimeoutCUDAErrorLaunchOutOfResourcesCUDAErrorInvalidDeviceFunctionCUDAErrorInvalidConfigurationCUDAErrorInvalidDeviceCUDAErrorInvalidValueCUDAErrorInvalidPitchValueCUDAErrorInvalidSymbolCUDAErrorMapBufferObjectFailedCUDAErrorUnmapBufferObjectFailedCUDAErrorInvalidHostPointerCUDAErrorInvalidDevicePointerCUDAErrorInvalidTextureCUDAErrorInvalidTextureBindingCUDAErrorInvalidChannelDescriptorCUDAErrorInvalidMemcpyDirectionCUDAErrorAddressOfConstantCUDAErrorTextureFetchFailedCUDAErrorTextureNotBoundCUDAErrorSynchronizationErrorCUDAErrorInvalidFilterSettingCUDAErrorInvalidNormSettingCUDAErrorMixedDeviceExecutionCUDAErrorCudartUnloadingCUDAErrorUnknownCUDAErrorNotYetImplementedCUDAErrorMemoryValueTooLargeCUDAErrorInvalidResourceHandleCUDAErrorNotReadyCUDAErrorInsufficientDriverCUDAErrorSetOnActiveProcessCUDAErrorInvalidSurfaceCUDAErrorNoDeviceCUDAErrorECCUncorrectableCUDAErrorSharedObjectSymbolNotFoundCUDAErrorSharedObjectInitFailedCUDAErrorUnsupportedLimitCUDAErrorDuplicateVariableNameCUDAErrorDuplicateTextureNameCUDAErrorDuplicateSurfaceNameCUDAErrorDevicesUnavailableCUDAErrorInvalidKernelImageCUDAErrorNoKernelImageForDeviceCUDAErrorIncompatibleDriverContextCUDAErrorPeerAccessAlreadyEnabledCUDAErrorPeerAccessNotEnabled"
	_CUDAError_name_1 = "CUDAErrorDeviceAlreadyInUseCUDAErrorProfilerDisabledCUDAErrorProfilerNotInitializedCUDAErrorProfilerAlreadyStartedCUDAErrorProfilerAlreadyStoppedCUDAErrorAssertCUDAErrorTooManyPeersCUDAErrorHostMemoryAlreadyRegisteredCUDAErrorHostMemoryNotRegisteredCUDAErrorOperatingSystemCUDAErrorPeerAccessUnsupportedCUDAErrorLaunchMaxDepthExceededCUDAErrorLaunchFileScopedTexCUDAErrorLaunchFileScopedSurfCUDAErrorSyncDepthExceededCUDAErrorLaunchPendingCountExceededCUDAErrorNotPermittedCUDAErrorNotSupportedCUDAErrorHardwareStackErrorCUDAErrorIllegalInstructionCUDAErrorMisalignedAddressCUDAErrorInvalidAddressSpaceCUDAErrorInvalidPcCUDAErrorIllegalAddressCUDAErrorInvalidPtxCUDAErrorInvalidGraphicsContextCUDAErrorNvlinkUncorrectableCUDAErrorJitCompilerNotFoundCUDAErrorCooperativeLaunchTooLarge"
	_CUDAError_name_2 = "CUDAErrorStartupFailure"
	_CUDAError_name_3 = "CUDAErrorApiFailureBase"
)

var (
	_CUDAError_index_0 = [...]uint16{0, 11, 40, 65, 93, 115, 142, 164, 193, 223, 252, 274, 295, 321, 343, 373, 405, 432, 461, 484, 514, 547, 578, 604, 631, 655, 684, 713, 740, 769, 793, 809, 835, 863, 893, 910, 937, 964, 987, 1004, 1029, 1064, 1095, 1120, 1150, 1179, 1208, 1235, 1262, 1293, 1327, 1360, 1389}
	_CUDAError_index_1 = [...]uint16{0, 27, 52, 83, 114, 145, 160, 181, 217, 249, 273, 303, 334, 362, 391, 417, 452, 473, 494, 521, 548, 574, 602, 620, 643, 662, 693, 721, 749, 783}
	_CUDAError_index_2 = [...]uint8{0, 23}
	_CUDAError_index_3 = [...]uint8{0, 23}
)

func (i CUDAError) String() string {
	switch {
	case 0 <= i && i <= 51:
		return _CUDAError_name_0[_CUDAError_index_0[i]:_CUDAError_index_0[i+1]]
	case 54 <= i && i <= 82:
		i -= 54
		return _CUDAError_name_1[_CUDAError_index_1[i]:_CUDAError_index_1[i+1]]
	case i == 127:
		return _CUDAError_name_2
	case i == 10000:
		return _CUDAError_name_3
	default:
		return fmt.Sprintf("CUDAError(%d)", i)
	}
}

var _CUDAErrorNameToValue_map = map[string]CUDAError{
	_CUDAError_name_0[0:11]:      0,
	_CUDAError_name_0[11:40]:     1,
	_CUDAError_name_0[40:65]:     2,
	_CUDAError_name_0[65:93]:     3,
	_CUDAError_name_0[93:115]:    4,
	_CUDAError_name_0[115:142]:   5,
	_CUDAError_name_0[142:164]:   6,
	_CUDAError_name_0[164:193]:   7,
	_CUDAError_name_0[193:223]:   8,
	_CUDAError_name_0[223:252]:   9,
	_CUDAError_name_0[252:274]:   10,
	_CUDAError_name_0[274:295]:   11,
	_CUDAError_name_0[295:321]:   12,
	_CUDAError_name_0[321:343]:   13,
	_CUDAError_name_0[343:373]:   14,
	_CUDAError_name_0[373:405]:   15,
	_CUDAError_name_0[405:432]:   16,
	_CUDAError_name_0[432:461]:   17,
	_CUDAError_name_0[461:484]:   18,
	_CUDAError_name_0[484:514]:   19,
	_CUDAError_name_0[514:547]:   20,
	_CUDAError_name_0[547:578]:   21,
	_CUDAError_name_0[578:604]:   22,
	_CUDAError_name_0[604:631]:   23,
	_CUDAError_name_0[631:655]:   24,
	_CUDAError_name_0[655:684]:   25,
	_CUDAError_name_0[684:713]:   26,
	_CUDAError_name_0[713:740]:   27,
	_CUDAError_name_0[740:769]:   28,
	_CUDAError_name_0[769:793]:   29,
	_CUDAError_name_0[793:809]:   30,
	_CUDAError_name_0[809:835]:   31,
	_CUDAError_name_0[835:863]:   32,
	_CUDAError_name_0[863:893]:   33,
	_CUDAError_name_0[893:910]:   34,
	_CUDAError_name_0[910:937]:   35,
	_CUDAError_name_0[937:964]:   36,
	_CUDAError_name_0[964:987]:   37,
	_CUDAError_name_0[987:1004]:  38,
	_CUDAError_name_0[1004:1029]: 39,
	_CUDAError_name_0[1029:1064]: 40,
	_CUDAError_name_0[1064:1095]: 41,
	_CUDAError_name_0[1095:1120]: 42,
	_CUDAError_name_0[1120:1150]: 43,
	_CUDAError_name_0[1150:1179]: 44,
	_CUDAError_name_0[1179:1208]: 45,
	_CUDAError_name_0[1208:1235]: 46,
	_CUDAError_name_0[1235:1262]: 47,
	_CUDAError_name_0[1262:1293]: 48,
	_CUDAError_name_0[1293:1327]: 49,
	_CUDAError_name_0[1327:1360]: 50,
	_CUDAError_name_0[1360:1389]: 51,
	_CUDAError_name_1[0:27]:      54,
	_CUDAError_name_1[27:52]:     55,
	_CUDAError_name_1[52:83]:     56,
	_CUDAError_name_1[83:114]:    57,
	_CUDAError_name_1[114:145]:   58,
	_CUDAError_name_1[145:160]:   59,
	_CUDAError_name_1[160:181]:   60,
	_CUDAError_name_1[181:217]:   61,
	_CUDAError_name_1[217:249]:   62,
	_CUDAError_name_1[249:273]:   63,
	_CUDAError_name_1[273:303]:   64,
	_CUDAError_name_1[303:334]:   65,
	_CUDAError_name_1[334:362]:   66,
	_CUDAError_name_1[362:391]:   67,
	_CUDAError_name_1[391:417]:   68,
	_CUDAError_name_1[417:452]:   69,
	_CUDAError_name_1[452:473]:   70,
	_CUDAError_name_1[473:494]:   71,
	_CUDAError_name_1[494:521]:   72,
	_CUDAError_name_1[521:548]:   73,
	_CUDAError_name_1[548:574]:   74,
	_CUDAError_name_1[574:602]:   75,
	_CUDAError_name_1[602:620]:   76,
	_CUDAError_name_1[620:643]:   77,
	_CUDAError_name_1[643:662]:   78,
	_CUDAError_name_1[662:693]:   79,
	_CUDAError_name_1[693:721]:   80,
	_CUDAError_name_1[721:749]:   81,
	_CUDAError_name_1[749:783]:   82,
	_CUDAError_name_2[0:23]:      127,
	_CUDAError_name_3[0:23]:      10000,
}

func CUDAErrorString(s string) (CUDAError, error) {
	if val, ok := _CUDAErrorNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUDAError values", s)
}

func (i CUDAError) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CUDAError) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUDAError should be a string, got %s", data)
	}

	var err error
	*i, err = CUDAErrorString(s)
	return err
}
