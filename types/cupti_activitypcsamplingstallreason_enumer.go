// Code generated by "enumer -type=CUpti_ActivityPCSamplingStallReason -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_CUpti_ActivityPCSamplingStallReasonName_0 = "CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALIDCUPTI_ACTIVITY_PC_SAMPLING_STALL_NONECUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCHCUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCYCUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCYCUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTURECUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNCCUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCYCUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSYCUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLECUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTEDCUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHERCUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPING"
	_CUpti_ActivityPCSamplingStallReasonName_1 = "CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INT"
)

var (
	_CUpti_ActivityPCSamplingStallReasonIndex_0 = [...]uint16{0, 40, 77, 120, 168, 218, 258, 295, 354, 396, 444, 489, 527, 568}
	_CUpti_ActivityPCSamplingStallReasonIndex_1 = [...]uint8{0, 42}
)

func (i CUpti_ActivityPCSamplingStallReason) String() string {
	switch {
	case 0 <= i && i <= 12:
		return _CUpti_ActivityPCSamplingStallReasonName_0[_CUpti_ActivityPCSamplingStallReasonIndex_0[i]:_CUpti_ActivityPCSamplingStallReasonIndex_0[i+1]]
	case i == 2147483647:
		return _CUpti_ActivityPCSamplingStallReasonName_1
	default:
		return fmt.Sprintf("CUpti_ActivityPCSamplingStallReason(%d)", i)
	}
}

var _CUpti_ActivityPCSamplingStallReasonValues = []CUpti_ActivityPCSamplingStallReason{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2147483647}

var _CUpti_ActivityPCSamplingStallReasonNameToValueMap = map[string]CUpti_ActivityPCSamplingStallReason{
	_CUpti_ActivityPCSamplingStallReasonName_0[0:40]:    0,
	_CUpti_ActivityPCSamplingStallReasonName_0[40:77]:   1,
	_CUpti_ActivityPCSamplingStallReasonName_0[77:120]:  2,
	_CUpti_ActivityPCSamplingStallReasonName_0[120:168]: 3,
	_CUpti_ActivityPCSamplingStallReasonName_0[168:218]: 4,
	_CUpti_ActivityPCSamplingStallReasonName_0[218:258]: 5,
	_CUpti_ActivityPCSamplingStallReasonName_0[258:295]: 6,
	_CUpti_ActivityPCSamplingStallReasonName_0[295:354]: 7,
	_CUpti_ActivityPCSamplingStallReasonName_0[354:396]: 8,
	_CUpti_ActivityPCSamplingStallReasonName_0[396:444]: 9,
	_CUpti_ActivityPCSamplingStallReasonName_0[444:489]: 10,
	_CUpti_ActivityPCSamplingStallReasonName_0[489:527]: 11,
	_CUpti_ActivityPCSamplingStallReasonName_0[527:568]: 12,
	_CUpti_ActivityPCSamplingStallReasonName_1[0:42]:    2147483647,
}

// CUpti_ActivityPCSamplingStallReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUpti_ActivityPCSamplingStallReasonString(s string) (CUpti_ActivityPCSamplingStallReason, error) {
	if val, ok := _CUpti_ActivityPCSamplingStallReasonNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_ActivityPCSamplingStallReason values", s)
}

// CUpti_ActivityPCSamplingStallReasonValues returns all values of the enum
func CUpti_ActivityPCSamplingStallReasonValues() []CUpti_ActivityPCSamplingStallReason {
	return _CUpti_ActivityPCSamplingStallReasonValues
}

// IsACUpti_ActivityPCSamplingStallReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUpti_ActivityPCSamplingStallReason) IsACUpti_ActivityPCSamplingStallReason() bool {
	for _, v := range _CUpti_ActivityPCSamplingStallReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUpti_ActivityPCSamplingStallReason
func (i CUpti_ActivityPCSamplingStallReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUpti_ActivityPCSamplingStallReason
func (i *CUpti_ActivityPCSamplingStallReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_ActivityPCSamplingStallReason should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_ActivityPCSamplingStallReasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUpti_ActivityPCSamplingStallReason
func (i CUpti_ActivityPCSamplingStallReason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUpti_ActivityPCSamplingStallReason
func (i *CUpti_ActivityPCSamplingStallReason) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUpti_ActivityPCSamplingStallReasonString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUpti_ActivityPCSamplingStallReason
func (i CUpti_ActivityPCSamplingStallReason) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUpti_ActivityPCSamplingStallReason
func (i *CUpti_ActivityPCSamplingStallReason) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUpti_ActivityPCSamplingStallReasonString(s)
	return err
}

func (i CUpti_ActivityPCSamplingStallReason) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUpti_ActivityPCSamplingStallReason) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUpti_ActivityPCSamplingStallReasonString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
