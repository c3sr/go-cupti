// Code generated by "enumer -type=CUpti_ActivityFlag -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_CUpti_ActivityFlagName_0 = "CUPTI_ACTIVITY_FLAG_NONECUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELSCUPTI_ACTIVITY_FLAG_MARKER_START"
	_CUpti_ActivityFlagName_1 = "CUPTI_ACTIVITY_FLAG_MARKER_END"
	_CUpti_ActivityFlagName_2 = "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE"
	_CUpti_ActivityFlagName_3 = "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESS"
	_CUpti_ActivityFlagName_4 = "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILED"
	_CUpti_ActivityFlagName_5 = "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASE"
	_CUpti_ActivityFlagName_6 = "CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASKCUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOAD"
	_CUpti_ActivityFlagName_7 = "CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASK"
	_CUpti_ActivityFlagName_8 = "CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHED"
	_CUpti_ActivityFlagName_9 = "CUPTI_ACTIVITY_FLAG_FORCE_INT"
)

var (
	_CUpti_ActivityFlagIndex_0 = [...]uint8{0, 24, 69, 101}
	_CUpti_ActivityFlagIndex_1 = [...]uint8{0, 30}
	_CUpti_ActivityFlagIndex_2 = [...]uint8{0, 39}
	_CUpti_ActivityFlagIndex_3 = [...]uint8{0, 47}
	_CUpti_ActivityFlagIndex_4 = [...]uint8{0, 46}
	_CUpti_ActivityFlagIndex_5 = [...]uint8{0, 39}
	_CUpti_ActivityFlagIndex_6 = [...]uint8{0, 48, 91}
	_CUpti_ActivityFlagIndex_7 = [...]uint8{0, 42}
	_CUpti_ActivityFlagIndex_8 = [...]uint8{0, 45}
	_CUpti_ActivityFlagIndex_9 = [...]uint8{0, 29}
)

func (i CUpti_ActivityFlag) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _CUpti_ActivityFlagName_0[_CUpti_ActivityFlagIndex_0[i]:_CUpti_ActivityFlagIndex_0[i+1]]
	case i == 4:
		return _CUpti_ActivityFlagName_1
	case i == 8:
		return _CUpti_ActivityFlagName_2
	case i == 16:
		return _CUpti_ActivityFlagName_3
	case i == 32:
		return _CUpti_ActivityFlagName_4
	case i == 64:
		return _CUpti_ActivityFlagName_5
	case 255 <= i && i <= 256:
		i -= 255
		return _CUpti_ActivityFlagName_6[_CUpti_ActivityFlagIndex_6[i]:_CUpti_ActivityFlagIndex_6[i+1]]
	case i == 510:
		return _CUpti_ActivityFlagName_7
	case i == 512:
		return _CUpti_ActivityFlagName_8
	case i == 2147483647:
		return _CUpti_ActivityFlagName_9
	default:
		return fmt.Sprintf("CUpti_ActivityFlag(%d)", i)
	}
}

var _CUpti_ActivityFlagValues = []CUpti_ActivityFlag{0, 1, 2, 4, 8, 16, 32, 64, 255, 256, 510, 512, 2147483647}

var _CUpti_ActivityFlagNameToValueMap = map[string]CUpti_ActivityFlag{
	_CUpti_ActivityFlagName_0[0:24]:   0,
	_CUpti_ActivityFlagName_0[24:69]:  1,
	_CUpti_ActivityFlagName_0[69:101]: 2,
	_CUpti_ActivityFlagName_1[0:30]:   4,
	_CUpti_ActivityFlagName_2[0:39]:   8,
	_CUpti_ActivityFlagName_3[0:47]:   16,
	_CUpti_ActivityFlagName_4[0:46]:   32,
	_CUpti_ActivityFlagName_5[0:39]:   64,
	_CUpti_ActivityFlagName_6[0:48]:   255,
	_CUpti_ActivityFlagName_6[48:91]:  256,
	_CUpti_ActivityFlagName_7[0:42]:   510,
	_CUpti_ActivityFlagName_8[0:45]:   512,
	_CUpti_ActivityFlagName_9[0:29]:   2147483647,
}

// CUpti_ActivityFlagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUpti_ActivityFlagString(s string) (CUpti_ActivityFlag, error) {
	if val, ok := _CUpti_ActivityFlagNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_ActivityFlag values", s)
}

// CUpti_ActivityFlagValues returns all values of the enum
func CUpti_ActivityFlagValues() []CUpti_ActivityFlag {
	return _CUpti_ActivityFlagValues
}

// IsACUpti_ActivityFlag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUpti_ActivityFlag) IsACUpti_ActivityFlag() bool {
	_, ok := _CUpti_ActivityFlagMap[i]
	return ok
}

// MarshalJSON implements the json.Marshaler interface for CUpti_ActivityFlag
func (i CUpti_ActivityFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUpti_ActivityFlag
func (i *CUpti_ActivityFlag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_ActivityFlag should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_ActivityFlagString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUpti_ActivityFlag
func (i CUpti_ActivityFlag) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUpti_ActivityFlag
func (i *CUpti_ActivityFlag) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUpti_ActivityFlagString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUpti_ActivityFlag
func (i CUpti_ActivityFlag) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUpti_ActivityFlag
func (i *CUpti_ActivityFlag) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUpti_ActivityFlagString(s)
	return err
}

func (i CUpti_ActivityFlag) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUpti_ActivityFlag) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUpti_ActivityFlagString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
