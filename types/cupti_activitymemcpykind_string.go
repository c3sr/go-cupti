// Code generated by "enumer -type=CUpti_ActivityMemcpyKind -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const (
	_CUpti_ActivityMemcpyKind_name_0 = "CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWNCUPTI_ACTIVITY_MEMCPY_KIND_HTODCUPTI_ACTIVITY_MEMCPY_KIND_DTOHCUPTI_ACTIVITY_MEMCPY_KIND_HTOACUPTI_ACTIVITY_MEMCPY_KIND_ATOHCUPTI_ACTIVITY_MEMCPY_KIND_ATOACUPTI_ACTIVITY_MEMCPY_KIND_ATODCUPTI_ACTIVITY_MEMCPY_KIND_DTOACUPTI_ACTIVITY_MEMCPY_KIND_DTODCUPTI_ACTIVITY_MEMCPY_KIND_HTOHCUPTI_ACTIVITY_MEMCPY_KIND_PTOP"
	_CUpti_ActivityMemcpyKind_name_1 = "CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INT"
)

var (
	_CUpti_ActivityMemcpyKind_index_0 = [...]uint16{0, 34, 65, 96, 127, 158, 189, 220, 251, 282, 313, 344}
	_CUpti_ActivityMemcpyKind_index_1 = [...]uint8{0, 36}
)

func (i CUpti_ActivityMemcpyKind) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _CUpti_ActivityMemcpyKind_name_0[_CUpti_ActivityMemcpyKind_index_0[i]:_CUpti_ActivityMemcpyKind_index_0[i+1]]
	case i == 2147483647:
		return _CUpti_ActivityMemcpyKind_name_1
	default:
		return fmt.Sprintf("CUpti_ActivityMemcpyKind(%d)", i)
	}
}

var _CUpti_ActivityMemcpyKindNameToValue_map = map[string]CUpti_ActivityMemcpyKind{
	_CUpti_ActivityMemcpyKind_name_0[0:34]:    0,
	_CUpti_ActivityMemcpyKind_name_0[34:65]:   1,
	_CUpti_ActivityMemcpyKind_name_0[65:96]:   2,
	_CUpti_ActivityMemcpyKind_name_0[96:127]:  3,
	_CUpti_ActivityMemcpyKind_name_0[127:158]: 4,
	_CUpti_ActivityMemcpyKind_name_0[158:189]: 5,
	_CUpti_ActivityMemcpyKind_name_0[189:220]: 6,
	_CUpti_ActivityMemcpyKind_name_0[220:251]: 7,
	_CUpti_ActivityMemcpyKind_name_0[251:282]: 8,
	_CUpti_ActivityMemcpyKind_name_0[282:313]: 9,
	_CUpti_ActivityMemcpyKind_name_0[313:344]: 10,
	_CUpti_ActivityMemcpyKind_name_1[0:36]:    2147483647,
}

func CUpti_ActivityMemcpyKindString(s string) (CUpti_ActivityMemcpyKind, error) {
	if val, ok := _CUpti_ActivityMemcpyKindNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_ActivityMemcpyKind values", s)
}

func (i CUpti_ActivityMemcpyKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CUpti_ActivityMemcpyKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_ActivityMemcpyKind should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_ActivityMemcpyKindString(s)
	return err
}
