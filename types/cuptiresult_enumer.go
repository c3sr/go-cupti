// Code generated by "enumer -type=CUptiResult -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_CUptiResultName_0 = "CUPTI_SUCCESSCUPTI_ERROR_INVALID_PARAMETERCUPTI_ERROR_INVALID_DEVICECUPTI_ERROR_INVALID_CONTEXTCUPTI_ERROR_INVALID_EVENT_DOMAIN_IDCUPTI_ERROR_INVALID_EVENT_IDCUPTI_ERROR_INVALID_EVENT_NAMECUPTI_ERROR_INVALID_OPERATIONCUPTI_ERROR_OUT_OF_MEMORYCUPTI_ERROR_HARDWARECUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENTCUPTI_ERROR_API_NOT_IMPLEMENTEDCUPTI_ERROR_MAX_LIMIT_REACHEDCUPTI_ERROR_NOT_READYCUPTI_ERROR_NOT_COMPATIBLECUPTI_ERROR_NOT_INITIALIZEDCUPTI_ERROR_INVALID_METRIC_IDCUPTI_ERROR_INVALID_METRIC_NAMECUPTI_ERROR_QUEUE_EMPTYCUPTI_ERROR_INVALID_HANDLECUPTI_ERROR_INVALID_STREAMCUPTI_ERROR_INVALID_KINDCUPTI_ERROR_INVALID_EVENT_VALUECUPTI_ERROR_DISABLEDCUPTI_ERROR_INVALID_MODULECUPTI_ERROR_INVALID_METRIC_VALUECUPTI_ERROR_HARDWARE_BUSYCUPTI_ERROR_NOT_SUPPORTEDCUPTI_ERROR_UM_PROFILING_NOT_SUPPORTEDCUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICECUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICESCUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS"
	_CUptiResultName_1 = "CUPTI_ERROR_UNKNOWN"
	_CUptiResultName_2 = "CUPTI_ERROR_FORCE_INT"
)

var (
	_CUptiResultIndex_0 = [...]uint16{0, 13, 42, 68, 95, 130, 158, 188, 217, 242, 262, 303, 334, 363, 384, 410, 437, 466, 497, 520, 546, 572, 596, 627, 647, 673, 705, 730, 755, 793, 841, 898, 945}
	_CUptiResultIndex_1 = [...]uint8{0, 19}
	_CUptiResultIndex_2 = [...]uint8{0, 21}
)

func (i CUptiResult) String() string {
	switch {
	case 0 <= i && i <= 31:
		return _CUptiResultName_0[_CUptiResultIndex_0[i]:_CUptiResultIndex_0[i+1]]
	case i == 999:
		return _CUptiResultName_1
	case i == 2147483647:
		return _CUptiResultName_2
	default:
		return fmt.Sprintf("CUptiResult(%d)", i)
	}
}

var _CUptiResultValues = []CUptiResult{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 999, 2147483647}

var _CUptiResultNameToValueMap = map[string]CUptiResult{
	_CUptiResultName_0[0:13]:    0,
	_CUptiResultName_0[13:42]:   1,
	_CUptiResultName_0[42:68]:   2,
	_CUptiResultName_0[68:95]:   3,
	_CUptiResultName_0[95:130]:  4,
	_CUptiResultName_0[130:158]: 5,
	_CUptiResultName_0[158:188]: 6,
	_CUptiResultName_0[188:217]: 7,
	_CUptiResultName_0[217:242]: 8,
	_CUptiResultName_0[242:262]: 9,
	_CUptiResultName_0[262:303]: 10,
	_CUptiResultName_0[303:334]: 11,
	_CUptiResultName_0[334:363]: 12,
	_CUptiResultName_0[363:384]: 13,
	_CUptiResultName_0[384:410]: 14,
	_CUptiResultName_0[410:437]: 15,
	_CUptiResultName_0[437:466]: 16,
	_CUptiResultName_0[466:497]: 17,
	_CUptiResultName_0[497:520]: 18,
	_CUptiResultName_0[520:546]: 19,
	_CUptiResultName_0[546:572]: 20,
	_CUptiResultName_0[572:596]: 21,
	_CUptiResultName_0[596:627]: 22,
	_CUptiResultName_0[627:647]: 23,
	_CUptiResultName_0[647:673]: 24,
	_CUptiResultName_0[673:705]: 25,
	_CUptiResultName_0[705:730]: 26,
	_CUptiResultName_0[730:755]: 27,
	_CUptiResultName_0[755:793]: 28,
	_CUptiResultName_0[793:841]: 29,
	_CUptiResultName_0[841:898]: 30,
	_CUptiResultName_0[898:945]: 31,
	_CUptiResultName_1[0:19]:    999,
	_CUptiResultName_2[0:21]:    2147483647,
}

// CUptiResultString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUptiResultString(s string) (CUptiResult, error) {
	if val, ok := _CUptiResultNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUptiResult values", s)
}

// CUptiResultValues returns all values of the enum
func CUptiResultValues() []CUptiResult {
	return _CUptiResultValues
}

// IsACUptiResult returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUptiResult) IsACUptiResult() bool {
	for _, v := range _CUptiResultValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUptiResult
func (i CUptiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUptiResult
func (i *CUptiResult) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUptiResult should be a string, got %s", data)
	}

	var err error
	*i, err = CUptiResultString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUptiResult
func (i CUptiResult) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUptiResult
func (i *CUptiResult) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUptiResultString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUptiResult
func (i CUptiResult) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUptiResult
func (i *CUptiResult) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUptiResultString(s)
	return err
}

func (i CUptiResult) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUptiResult) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUptiResultString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
