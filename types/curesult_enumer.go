// Code generated by "enumer -type=CUresult -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _CUresultName = "CUDA_SUCCESSCUDA_ERROR_INVALID_VALUECUDA_ERROR_OUT_OF_MEMORYCUDA_ERROR_NOT_INITIALIZEDCUDA_ERROR_DEINITIALIZEDCUDA_ERROR_PROFILER_DISABLEDCUDA_ERROR_PROFILER_NOT_INITIALIZEDCUDA_ERROR_PROFILER_ALREADY_STARTEDCUDA_ERROR_PROFILER_ALREADY_STOPPEDCUDA_ERROR_NO_DEVICECUDA_ERROR_INVALID_DEVICECUDA_ERROR_INVALID_IMAGECUDA_ERROR_INVALID_CONTEXTCUDA_ERROR_CONTEXT_ALREADY_CURRENTCUDA_ERROR_MAP_FAILEDCUDA_ERROR_UNMAP_FAILEDCUDA_ERROR_ARRAY_IS_MAPPEDCUDA_ERROR_ALREADY_MAPPEDCUDA_ERROR_NO_BINARY_FOR_GPUCUDA_ERROR_ALREADY_ACQUIREDCUDA_ERROR_NOT_MAPPEDCUDA_ERROR_NOT_MAPPED_AS_ARRAYCUDA_ERROR_NOT_MAPPED_AS_POINTERCUDA_ERROR_ECC_UNCORRECTABLECUDA_ERROR_UNSUPPORTED_LIMITCUDA_ERROR_CONTEXT_ALREADY_IN_USECUDA_ERROR_PEER_ACCESS_UNSUPPORTEDCUDA_ERROR_INVALID_PTXCUDA_ERROR_INVALID_GRAPHICS_CONTEXTCUDA_ERROR_NVLINK_UNCORRECTABLECUDA_ERROR_JIT_COMPILER_NOT_FOUNDCUDA_ERROR_INVALID_SOURCECUDA_ERROR_FILE_NOT_FOUNDCUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUNDCUDA_ERROR_SHARED_OBJECT_INIT_FAILEDCUDA_ERROR_OPERATING_SYSTEMCUDA_ERROR_INVALID_HANDLECUDA_ERROR_NOT_FOUNDCUDA_ERROR_NOT_READYCUDA_ERROR_ILLEGAL_ADDRESSCUDA_ERROR_LAUNCH_OUT_OF_RESOURCESCUDA_ERROR_LAUNCH_TIMEOUTCUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURINGCUDA_ERROR_PEER_ACCESS_ALREADY_ENABLEDCUDA_ERROR_PEER_ACCESS_NOT_ENABLEDCUDA_ERROR_PRIMARY_CONTEXT_ACTIVECUDA_ERROR_CONTEXT_IS_DESTROYEDCUDA_ERROR_ASSERTCUDA_ERROR_TOO_MANY_PEERSCUDA_ERROR_HOST_MEMORY_ALREADY_REGISTEREDCUDA_ERROR_HOST_MEMORY_NOT_REGISTEREDCUDA_ERROR_HARDWARE_STACK_ERRORCUDA_ERROR_ILLEGAL_INSTRUCTIONCUDA_ERROR_MISALIGNED_ADDRESSCUDA_ERROR_INVALID_ADDRESS_SPACECUDA_ERROR_INVALID_PCCUDA_ERROR_LAUNCH_FAILEDCUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGECUDA_ERROR_NOT_PERMITTEDCUDA_ERROR_NOT_SUPPORTEDCUDA_ERROR_UNKNOWN"

var _CUresultMap = map[CUresult]string{
	0:   _CUresultName[0:12],
	1:   _CUresultName[12:36],
	2:   _CUresultName[36:60],
	3:   _CUresultName[60:86],
	4:   _CUresultName[86:110],
	5:   _CUresultName[110:138],
	6:   _CUresultName[138:173],
	7:   _CUresultName[173:208],
	8:   _CUresultName[208:243],
	100: _CUresultName[243:263],
	101: _CUresultName[263:288],
	200: _CUresultName[288:312],
	201: _CUresultName[312:338],
	202: _CUresultName[338:372],
	205: _CUresultName[372:393],
	206: _CUresultName[393:416],
	207: _CUresultName[416:442],
	208: _CUresultName[442:467],
	209: _CUresultName[467:495],
	210: _CUresultName[495:522],
	211: _CUresultName[522:543],
	212: _CUresultName[543:573],
	213: _CUresultName[573:605],
	214: _CUresultName[605:633],
	215: _CUresultName[633:661],
	216: _CUresultName[661:694],
	217: _CUresultName[694:728],
	218: _CUresultName[728:750],
	219: _CUresultName[750:785],
	220: _CUresultName[785:816],
	221: _CUresultName[816:849],
	300: _CUresultName[849:874],
	301: _CUresultName[874:899],
	302: _CUresultName[899:940],
	303: _CUresultName[940:976],
	304: _CUresultName[976:1003],
	400: _CUresultName[1003:1028],
	500: _CUresultName[1028:1048],
	600: _CUresultName[1048:1068],
	700: _CUresultName[1068:1094],
	701: _CUresultName[1094:1128],
	702: _CUresultName[1128:1153],
	703: _CUresultName[1153:1193],
	704: _CUresultName[1193:1231],
	705: _CUresultName[1231:1265],
	708: _CUresultName[1265:1298],
	709: _CUresultName[1298:1329],
	710: _CUresultName[1329:1346],
	711: _CUresultName[1346:1371],
	712: _CUresultName[1371:1412],
	713: _CUresultName[1412:1449],
	714: _CUresultName[1449:1480],
	715: _CUresultName[1480:1510],
	716: _CUresultName[1510:1539],
	717: _CUresultName[1539:1571],
	718: _CUresultName[1571:1592],
	719: _CUresultName[1592:1616],
	720: _CUresultName[1616:1655],
	800: _CUresultName[1655:1679],
	801: _CUresultName[1679:1703],
	999: _CUresultName[1703:1721],
}

func (i CUresult) String() string {
	if str, ok := _CUresultMap[i]; ok {
		return str
	}
	return fmt.Sprintf("CUresult(%d)", i)
}

var _CUresultValues = []CUresult{0, 1, 2, 3, 4, 5, 6, 7, 8, 100, 101, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 300, 301, 302, 303, 304, 400, 500, 600, 700, 701, 702, 703, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 800, 801, 999}

var _CUresultNameToValueMap = map[string]CUresult{
	_CUresultName[0:12]:      0,
	_CUresultName[12:36]:     1,
	_CUresultName[36:60]:     2,
	_CUresultName[60:86]:     3,
	_CUresultName[86:110]:    4,
	_CUresultName[110:138]:   5,
	_CUresultName[138:173]:   6,
	_CUresultName[173:208]:   7,
	_CUresultName[208:243]:   8,
	_CUresultName[243:263]:   100,
	_CUresultName[263:288]:   101,
	_CUresultName[288:312]:   200,
	_CUresultName[312:338]:   201,
	_CUresultName[338:372]:   202,
	_CUresultName[372:393]:   205,
	_CUresultName[393:416]:   206,
	_CUresultName[416:442]:   207,
	_CUresultName[442:467]:   208,
	_CUresultName[467:495]:   209,
	_CUresultName[495:522]:   210,
	_CUresultName[522:543]:   211,
	_CUresultName[543:573]:   212,
	_CUresultName[573:605]:   213,
	_CUresultName[605:633]:   214,
	_CUresultName[633:661]:   215,
	_CUresultName[661:694]:   216,
	_CUresultName[694:728]:   217,
	_CUresultName[728:750]:   218,
	_CUresultName[750:785]:   219,
	_CUresultName[785:816]:   220,
	_CUresultName[816:849]:   221,
	_CUresultName[849:874]:   300,
	_CUresultName[874:899]:   301,
	_CUresultName[899:940]:   302,
	_CUresultName[940:976]:   303,
	_CUresultName[976:1003]:  304,
	_CUresultName[1003:1028]: 400,
	_CUresultName[1028:1048]: 500,
	_CUresultName[1048:1068]: 600,
	_CUresultName[1068:1094]: 700,
	_CUresultName[1094:1128]: 701,
	_CUresultName[1128:1153]: 702,
	_CUresultName[1153:1193]: 703,
	_CUresultName[1193:1231]: 704,
	_CUresultName[1231:1265]: 705,
	_CUresultName[1265:1298]: 708,
	_CUresultName[1298:1329]: 709,
	_CUresultName[1329:1346]: 710,
	_CUresultName[1346:1371]: 711,
	_CUresultName[1371:1412]: 712,
	_CUresultName[1412:1449]: 713,
	_CUresultName[1449:1480]: 714,
	_CUresultName[1480:1510]: 715,
	_CUresultName[1510:1539]: 716,
	_CUresultName[1539:1571]: 717,
	_CUresultName[1571:1592]: 718,
	_CUresultName[1592:1616]: 719,
	_CUresultName[1616:1655]: 720,
	_CUresultName[1655:1679]: 800,
	_CUresultName[1679:1703]: 801,
	_CUresultName[1703:1721]: 999,
}

// CUresultString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUresultString(s string) (CUresult, error) {
	if val, ok := _CUresultNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUresult values", s)
}

// CUresultValues returns all values of the enum
func CUresultValues() []CUresult {
	return _CUresultValues
}

// IsACUresult returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUresult) IsACUresult() bool {
	_, ok := _CUresultMap[i]
	return ok
}

// MarshalJSON implements the json.Marshaler interface for CUresult
func (i CUresult) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUresult
func (i *CUresult) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUresult should be a string, got %s", data)
	}

	var err error
	*i, err = CUresultString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUresult
func (i CUresult) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUresult
func (i *CUresult) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUresultString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUresult
func (i CUresult) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUresult
func (i *CUresult) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUresultString(s)
	return err
}

func (i CUresult) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUresult) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUresultString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
