// Code generated by "enumer -type=CUpti_EventCategory -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_CUpti_EventCategoryName_0 = "CUPTI_EVENT_CATEGORY_INSTRUCTIONCUPTI_EVENT_CATEGORY_MEMORYCUPTI_EVENT_CATEGORY_CACHECUPTI_EVENT_CATEGORY_PROFILE_TRIGGER"
	_CUpti_EventCategoryName_1 = "CUPTI_EVENT_CATEGORY_FORCE_INT"
)

var (
	_CUpti_EventCategoryIndex_0 = [...]uint8{0, 32, 59, 85, 121}
	_CUpti_EventCategoryIndex_1 = [...]uint8{0, 30}
)

func (i CUpti_EventCategory) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _CUpti_EventCategoryName_0[_CUpti_EventCategoryIndex_0[i]:_CUpti_EventCategoryIndex_0[i+1]]
	case i == 2147483647:
		return _CUpti_EventCategoryName_1
	default:
		return fmt.Sprintf("CUpti_EventCategory(%d)", i)
	}
}

var _CUpti_EventCategoryValues = []CUpti_EventCategory{0, 1, 2, 3, 2147483647}

var _CUpti_EventCategoryNameToValueMap = map[string]CUpti_EventCategory{
	_CUpti_EventCategoryName_0[0:32]:   0,
	_CUpti_EventCategoryName_0[32:59]:  1,
	_CUpti_EventCategoryName_0[59:85]:  2,
	_CUpti_EventCategoryName_0[85:121]: 3,
	_CUpti_EventCategoryName_1[0:30]:   2147483647,
}

// CUpti_EventCategoryString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUpti_EventCategoryString(s string) (CUpti_EventCategory, error) {
	if val, ok := _CUpti_EventCategoryNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_EventCategory values", s)
}

// CUpti_EventCategoryValues returns all values of the enum
func CUpti_EventCategoryValues() []CUpti_EventCategory {
	return _CUpti_EventCategoryValues
}

// IsACUpti_EventCategory returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUpti_EventCategory) IsACUpti_EventCategory() bool {
	for _, v := range _CUpti_EventCategoryValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUpti_EventCategory
func (i CUpti_EventCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUpti_EventCategory
func (i *CUpti_EventCategory) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_EventCategory should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_EventCategoryString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUpti_EventCategory
func (i CUpti_EventCategory) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUpti_EventCategory
func (i *CUpti_EventCategory) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUpti_EventCategoryString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUpti_EventCategory
func (i CUpti_EventCategory) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUpti_EventCategory
func (i *CUpti_EventCategory) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUpti_EventCategoryString(s)
	return err
}

func (i CUpti_EventCategory) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUpti_EventCategory) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUpti_EventCategoryString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
