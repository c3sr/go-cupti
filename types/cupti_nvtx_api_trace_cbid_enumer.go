// Code generated by "enumer -type=CUpti_nvtx_api_trace_cbid -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_CUpti_nvtx_api_trace_cbidName_0 = "CUPTI_CBID_NVTX_INVALIDCUPTI_CBID_NVTX_nvtxMarkACUPTI_CBID_NVTX_nvtxMarkWCUPTI_CBID_NVTX_nvtxMarkExCUPTI_CBID_NVTX_nvtxRangeStartACUPTI_CBID_NVTX_nvtxRangeStartWCUPTI_CBID_NVTX_nvtxRangeStartExCUPTI_CBID_NVTX_nvtxRangeEndCUPTI_CBID_NVTX_nvtxRangePushACUPTI_CBID_NVTX_nvtxRangePushWCUPTI_CBID_NVTX_nvtxRangePushExCUPTI_CBID_NVTX_nvtxRangePopCUPTI_CBID_NVTX_nvtxNameCategoryACUPTI_CBID_NVTX_nvtxNameCategoryWCUPTI_CBID_NVTX_nvtxNameOsThreadACUPTI_CBID_NVTX_nvtxNameOsThreadWCUPTI_CBID_NVTX_nvtxNameCuDeviceACUPTI_CBID_NVTX_nvtxNameCuDeviceWCUPTI_CBID_NVTX_nvtxNameCuContextACUPTI_CBID_NVTX_nvtxNameCuContextWCUPTI_CBID_NVTX_nvtxNameCuStreamACUPTI_CBID_NVTX_nvtxNameCuStreamWCUPTI_CBID_NVTX_nvtxNameCuEventACUPTI_CBID_NVTX_nvtxNameCuEventWCUPTI_CBID_NVTX_nvtxNameCudaDeviceACUPTI_CBID_NVTX_nvtxNameCudaDeviceWCUPTI_CBID_NVTX_nvtxNameCudaStreamACUPTI_CBID_NVTX_nvtxNameCudaStreamWCUPTI_CBID_NVTX_nvtxNameCudaEventACUPTI_CBID_NVTX_nvtxNameCudaEventWCUPTI_CBID_NVTX_nvtxDomainMarkExCUPTI_CBID_NVTX_nvtxDomainRangeStartExCUPTI_CBID_NVTX_nvtxDomainRangeEndCUPTI_CBID_NVTX_nvtxDomainRangePushExCUPTI_CBID_NVTX_nvtxDomainRangePopCUPTI_CBID_NVTX_nvtxDomainResourceCreateCUPTI_CBID_NVTX_nvtxDomainResourceDestroyCUPTI_CBID_NVTX_nvtxDomainNameCategoryACUPTI_CBID_NVTX_nvtxDomainNameCategoryWCUPTI_CBID_NVTX_nvtxDomainRegisterStringACUPTI_CBID_NVTX_nvtxDomainRegisterStringWCUPTI_CBID_NVTX_nvtxDomainCreateACUPTI_CBID_NVTX_nvtxDomainCreateWCUPTI_CBID_NVTX_nvtxDomainDestroyCUPTI_CBID_NVTX_nvtxDomainSyncUserCreateCUPTI_CBID_NVTX_nvtxDomainSyncUserDestroyCUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireStartCUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireFailedCUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireSuccessCUPTI_CBID_NVTX_nvtxDomainSyncUserReleasing"
	_CUpti_nvtx_api_trace_cbidName_1 = "CUPTI_CBID_NVTX_FORCE_INT"
)

var (
	_CUpti_nvtx_api_trace_cbidIndex_0 = [...]uint16{0, 23, 48, 73, 99, 130, 161, 193, 221, 251, 281, 312, 340, 373, 406, 439, 472, 505, 538, 572, 606, 639, 672, 704, 736, 771, 806, 841, 876, 910, 944, 976, 1014, 1048, 1085, 1119, 1159, 1200, 1239, 1278, 1319, 1360, 1393, 1426, 1459, 1499, 1540, 1586, 1633, 1681, 1724}
	_CUpti_nvtx_api_trace_cbidIndex_1 = [...]uint8{0, 25}
)

func (i CUpti_nvtx_api_trace_cbid) String() string {
	switch {
	case 0 <= i && i <= 49:
		return _CUpti_nvtx_api_trace_cbidName_0[_CUpti_nvtx_api_trace_cbidIndex_0[i]:_CUpti_nvtx_api_trace_cbidIndex_0[i+1]]
	case i == 2147483647:
		return _CUpti_nvtx_api_trace_cbidName_1
	default:
		return fmt.Sprintf("CUpti_nvtx_api_trace_cbid(%d)", i)
	}
}

var _CUpti_nvtx_api_trace_cbidValues = []CUpti_nvtx_api_trace_cbid{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 2147483647}

var _CUpti_nvtx_api_trace_cbidNameToValueMap = map[string]CUpti_nvtx_api_trace_cbid{
	_CUpti_nvtx_api_trace_cbidName_0[0:23]:      0,
	_CUpti_nvtx_api_trace_cbidName_0[23:48]:     1,
	_CUpti_nvtx_api_trace_cbidName_0[48:73]:     2,
	_CUpti_nvtx_api_trace_cbidName_0[73:99]:     3,
	_CUpti_nvtx_api_trace_cbidName_0[99:130]:    4,
	_CUpti_nvtx_api_trace_cbidName_0[130:161]:   5,
	_CUpti_nvtx_api_trace_cbidName_0[161:193]:   6,
	_CUpti_nvtx_api_trace_cbidName_0[193:221]:   7,
	_CUpti_nvtx_api_trace_cbidName_0[221:251]:   8,
	_CUpti_nvtx_api_trace_cbidName_0[251:281]:   9,
	_CUpti_nvtx_api_trace_cbidName_0[281:312]:   10,
	_CUpti_nvtx_api_trace_cbidName_0[312:340]:   11,
	_CUpti_nvtx_api_trace_cbidName_0[340:373]:   12,
	_CUpti_nvtx_api_trace_cbidName_0[373:406]:   13,
	_CUpti_nvtx_api_trace_cbidName_0[406:439]:   14,
	_CUpti_nvtx_api_trace_cbidName_0[439:472]:   15,
	_CUpti_nvtx_api_trace_cbidName_0[472:505]:   16,
	_CUpti_nvtx_api_trace_cbidName_0[505:538]:   17,
	_CUpti_nvtx_api_trace_cbidName_0[538:572]:   18,
	_CUpti_nvtx_api_trace_cbidName_0[572:606]:   19,
	_CUpti_nvtx_api_trace_cbidName_0[606:639]:   20,
	_CUpti_nvtx_api_trace_cbidName_0[639:672]:   21,
	_CUpti_nvtx_api_trace_cbidName_0[672:704]:   22,
	_CUpti_nvtx_api_trace_cbidName_0[704:736]:   23,
	_CUpti_nvtx_api_trace_cbidName_0[736:771]:   24,
	_CUpti_nvtx_api_trace_cbidName_0[771:806]:   25,
	_CUpti_nvtx_api_trace_cbidName_0[806:841]:   26,
	_CUpti_nvtx_api_trace_cbidName_0[841:876]:   27,
	_CUpti_nvtx_api_trace_cbidName_0[876:910]:   28,
	_CUpti_nvtx_api_trace_cbidName_0[910:944]:   29,
	_CUpti_nvtx_api_trace_cbidName_0[944:976]:   30,
	_CUpti_nvtx_api_trace_cbidName_0[976:1014]:  31,
	_CUpti_nvtx_api_trace_cbidName_0[1014:1048]: 32,
	_CUpti_nvtx_api_trace_cbidName_0[1048:1085]: 33,
	_CUpti_nvtx_api_trace_cbidName_0[1085:1119]: 34,
	_CUpti_nvtx_api_trace_cbidName_0[1119:1159]: 35,
	_CUpti_nvtx_api_trace_cbidName_0[1159:1200]: 36,
	_CUpti_nvtx_api_trace_cbidName_0[1200:1239]: 37,
	_CUpti_nvtx_api_trace_cbidName_0[1239:1278]: 38,
	_CUpti_nvtx_api_trace_cbidName_0[1278:1319]: 39,
	_CUpti_nvtx_api_trace_cbidName_0[1319:1360]: 40,
	_CUpti_nvtx_api_trace_cbidName_0[1360:1393]: 41,
	_CUpti_nvtx_api_trace_cbidName_0[1393:1426]: 42,
	_CUpti_nvtx_api_trace_cbidName_0[1426:1459]: 43,
	_CUpti_nvtx_api_trace_cbidName_0[1459:1499]: 44,
	_CUpti_nvtx_api_trace_cbidName_0[1499:1540]: 45,
	_CUpti_nvtx_api_trace_cbidName_0[1540:1586]: 46,
	_CUpti_nvtx_api_trace_cbidName_0[1586:1633]: 47,
	_CUpti_nvtx_api_trace_cbidName_0[1633:1681]: 48,
	_CUpti_nvtx_api_trace_cbidName_0[1681:1724]: 49,
	_CUpti_nvtx_api_trace_cbidName_1[0:25]:      2147483647,
}

// CUpti_nvtx_api_trace_cbidString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUpti_nvtx_api_trace_cbidString(s string) (CUpti_nvtx_api_trace_cbid, error) {
	if val, ok := _CUpti_nvtx_api_trace_cbidNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_nvtx_api_trace_cbid values", s)
}

// CUpti_nvtx_api_trace_cbidValues returns all values of the enum
func CUpti_nvtx_api_trace_cbidValues() []CUpti_nvtx_api_trace_cbid {
	return _CUpti_nvtx_api_trace_cbidValues
}

// IsACUpti_nvtx_api_trace_cbid returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUpti_nvtx_api_trace_cbid) IsACUpti_nvtx_api_trace_cbid() bool {
	for _, v := range _CUpti_nvtx_api_trace_cbidValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUpti_nvtx_api_trace_cbid
func (i CUpti_nvtx_api_trace_cbid) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUpti_nvtx_api_trace_cbid
func (i *CUpti_nvtx_api_trace_cbid) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_nvtx_api_trace_cbid should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_nvtx_api_trace_cbidString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUpti_nvtx_api_trace_cbid
func (i CUpti_nvtx_api_trace_cbid) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUpti_nvtx_api_trace_cbid
func (i *CUpti_nvtx_api_trace_cbid) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUpti_nvtx_api_trace_cbidString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUpti_nvtx_api_trace_cbid
func (i CUpti_nvtx_api_trace_cbid) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUpti_nvtx_api_trace_cbid
func (i *CUpti_nvtx_api_trace_cbid) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUpti_nvtx_api_trace_cbidString(s)
	return err
}

func (i CUpti_nvtx_api_trace_cbid) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUpti_nvtx_api_trace_cbid) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUpti_nvtx_api_trace_cbidString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
