// Code generated by "enumer -type=CUpti_MetricPropertyDeviceClass -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _CUpti_MetricPropertyDeviceClassName = "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLACUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADROCUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCECUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA"

var _CUpti_MetricPropertyDeviceClassIndex = [...]uint8{0, 40, 81, 123, 163}

func (i CUpti_MetricPropertyDeviceClass) String() string {
	if i < 0 || i >= CUpti_MetricPropertyDeviceClass(len(_CUpti_MetricPropertyDeviceClassIndex)-1) {
		return fmt.Sprintf("CUpti_MetricPropertyDeviceClass(%d)", i)
	}
	return _CUpti_MetricPropertyDeviceClassName[_CUpti_MetricPropertyDeviceClassIndex[i]:_CUpti_MetricPropertyDeviceClassIndex[i+1]]
}

var _CUpti_MetricPropertyDeviceClassValues = []CUpti_MetricPropertyDeviceClass{0, 1, 2, 3}

var _CUpti_MetricPropertyDeviceClassNameToValueMap = map[string]CUpti_MetricPropertyDeviceClass{
	_CUpti_MetricPropertyDeviceClassName[0:40]:    0,
	_CUpti_MetricPropertyDeviceClassName[40:81]:   1,
	_CUpti_MetricPropertyDeviceClassName[81:123]:  2,
	_CUpti_MetricPropertyDeviceClassName[123:163]: 3,
}

// CUpti_MetricPropertyDeviceClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUpti_MetricPropertyDeviceClassString(s string) (CUpti_MetricPropertyDeviceClass, error) {
	if val, ok := _CUpti_MetricPropertyDeviceClassNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_MetricPropertyDeviceClass values", s)
}

// CUpti_MetricPropertyDeviceClassValues returns all values of the enum
func CUpti_MetricPropertyDeviceClassValues() []CUpti_MetricPropertyDeviceClass {
	return _CUpti_MetricPropertyDeviceClassValues
}

// IsACUpti_MetricPropertyDeviceClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUpti_MetricPropertyDeviceClass) IsACUpti_MetricPropertyDeviceClass() bool {
	for _, v := range _CUpti_MetricPropertyDeviceClassValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUpti_MetricPropertyDeviceClass
func (i CUpti_MetricPropertyDeviceClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUpti_MetricPropertyDeviceClass
func (i *CUpti_MetricPropertyDeviceClass) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_MetricPropertyDeviceClass should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_MetricPropertyDeviceClassString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUpti_MetricPropertyDeviceClass
func (i CUpti_MetricPropertyDeviceClass) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUpti_MetricPropertyDeviceClass
func (i *CUpti_MetricPropertyDeviceClass) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUpti_MetricPropertyDeviceClassString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUpti_MetricPropertyDeviceClass
func (i CUpti_MetricPropertyDeviceClass) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUpti_MetricPropertyDeviceClass
func (i *CUpti_MetricPropertyDeviceClass) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUpti_MetricPropertyDeviceClassString(s)
	return err
}

func (i CUpti_MetricPropertyDeviceClass) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUpti_MetricPropertyDeviceClass) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUpti_MetricPropertyDeviceClassString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
