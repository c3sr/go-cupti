// Code generated by "enumer -type=CUpti_DevType -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const (
	_CUpti_DevType_name_0 = "CUPTI_DEV_TYPE_INVALIDCUPTI_DEV_TYPE_GPUCUPTI_DEV_TYPE_NPU"
	_CUpti_DevType_name_1 = "CUPTI_DEV_TYPE_FORCE_INT"
)

var (
	_CUpti_DevType_index_0 = [...]uint8{0, 22, 40, 58}
	_CUpti_DevType_index_1 = [...]uint8{0, 24}
)

func (i CUpti_DevType) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _CUpti_DevType_name_0[_CUpti_DevType_index_0[i]:_CUpti_DevType_index_0[i+1]]
	case i == 2147483647:
		return _CUpti_DevType_name_1
	default:
		return fmt.Sprintf("CUpti_DevType(%d)", i)
	}
}

var _CUpti_DevTypeNameToValue_map = map[string]CUpti_DevType{
	_CUpti_DevType_name_0[0:22]:  0,
	_CUpti_DevType_name_0[22:40]: 1,
	_CUpti_DevType_name_0[40:58]: 2,
	_CUpti_DevType_name_1[0:24]:  2147483647,
}

func CUpti_DevTypeString(s string) (CUpti_DevType, error) {
	if val, ok := _CUpti_DevTypeNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_DevType values", s)
}

func (i CUpti_DevType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CUpti_DevType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_DevType should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_DevTypeString(s)
	return err
}
