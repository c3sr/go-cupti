// Code generated by "enumer -type=CUDAMemcpyKind -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const _CUDAMemcpyKind_name = "CUDAMemcpyHostToHostCUDAMemcpyHostToDeviceCUDAMemcpyDeviceToHostCUDAMemcpyDeviceToDevice"

var _CUDAMemcpyKind_index = [...]uint8{0, 20, 42, 64, 88}

func (i CUDAMemcpyKind) String() string {
	if i < 0 || i >= CUDAMemcpyKind(len(_CUDAMemcpyKind_index)-1) {
		return fmt.Sprintf("CUDAMemcpyKind(%d)", i)
	}
	return _CUDAMemcpyKind_name[_CUDAMemcpyKind_index[i]:_CUDAMemcpyKind_index[i+1]]
}

var _CUDAMemcpyKindNameToValue_map = map[string]CUDAMemcpyKind{
	_CUDAMemcpyKind_name[0:20]:  0,
	_CUDAMemcpyKind_name[20:42]: 1,
	_CUDAMemcpyKind_name[42:64]: 2,
	_CUDAMemcpyKind_name[64:88]: 3,
}

func CUDAMemcpyKindString(s string) (CUDAMemcpyKind, error) {
	if val, ok := _CUDAMemcpyKindNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUDAMemcpyKind values", s)
}

func (i CUDAMemcpyKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CUDAMemcpyKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUDAMemcpyKind should be a string, got %s", data)
	}

	var err error
	*i, err = CUDAMemcpyKindString(s)
	return err
}
