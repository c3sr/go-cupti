// Code generated by "enumer -type=CUpti_EnvironmentClocksThrottleReason -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_CUpti_EnvironmentClocksThrottleReasonName_0 = "CUPTI_CLOCKS_THROTTLE_REASON_NONECUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLECUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS"
	_CUpti_EnvironmentClocksThrottleReasonName_1 = "CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP"
	_CUpti_EnvironmentClocksThrottleReasonName_2 = "CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN"
	_CUpti_EnvironmentClocksThrottleReasonName_3 = "CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED"
	_CUpti_EnvironmentClocksThrottleReasonName_4 = "CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INTCUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN"
)

var (
	_CUpti_EnvironmentClocksThrottleReasonIndex_0 = [...]uint8{0, 33, 70, 118}
	_CUpti_EnvironmentClocksThrottleReasonIndex_1 = [...]uint8{0, 41}
	_CUpti_EnvironmentClocksThrottleReasonIndex_2 = [...]uint8{0, 40}
	_CUpti_EnvironmentClocksThrottleReasonIndex_3 = [...]uint8{0, 40}
	_CUpti_EnvironmentClocksThrottleReasonIndex_4 = [...]uint8{0, 38, 74}
)

func (i CUpti_EnvironmentClocksThrottleReason) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _CUpti_EnvironmentClocksThrottleReasonName_0[_CUpti_EnvironmentClocksThrottleReasonIndex_0[i]:_CUpti_EnvironmentClocksThrottleReasonIndex_0[i+1]]
	case i == 4:
		return _CUpti_EnvironmentClocksThrottleReasonName_1
	case i == 8:
		return _CUpti_EnvironmentClocksThrottleReasonName_2
	case i == 1073741824:
		return _CUpti_EnvironmentClocksThrottleReasonName_3
	case 2147483647 <= i && i <= 2147483648:
		i -= 2147483647
		return _CUpti_EnvironmentClocksThrottleReasonName_4[_CUpti_EnvironmentClocksThrottleReasonIndex_4[i]:_CUpti_EnvironmentClocksThrottleReasonIndex_4[i+1]]
	default:
		return fmt.Sprintf("CUpti_EnvironmentClocksThrottleReason(%d)", i)
	}
}

var _CUpti_EnvironmentClocksThrottleReasonValues = []CUpti_EnvironmentClocksThrottleReason{0, 1, 2, 4, 8, 1073741824, 2147483647, 2147483648}

var _CUpti_EnvironmentClocksThrottleReasonNameToValueMap = map[string]CUpti_EnvironmentClocksThrottleReason{
	_CUpti_EnvironmentClocksThrottleReasonName_0[0:33]:   0,
	_CUpti_EnvironmentClocksThrottleReasonName_0[33:70]:  1,
	_CUpti_EnvironmentClocksThrottleReasonName_0[70:118]: 2,
	_CUpti_EnvironmentClocksThrottleReasonName_1[0:41]:   4,
	_CUpti_EnvironmentClocksThrottleReasonName_2[0:40]:   8,
	_CUpti_EnvironmentClocksThrottleReasonName_3[0:40]:   1073741824,
	_CUpti_EnvironmentClocksThrottleReasonName_4[0:38]:   2147483647,
	_CUpti_EnvironmentClocksThrottleReasonName_4[38:74]:  2147483648,
}

// CUpti_EnvironmentClocksThrottleReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUpti_EnvironmentClocksThrottleReasonString(s string) (CUpti_EnvironmentClocksThrottleReason, error) {
	if val, ok := _CUpti_EnvironmentClocksThrottleReasonNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_EnvironmentClocksThrottleReason values", s)
}

// CUpti_EnvironmentClocksThrottleReasonValues returns all values of the enum
func CUpti_EnvironmentClocksThrottleReasonValues() []CUpti_EnvironmentClocksThrottleReason {
	return _CUpti_EnvironmentClocksThrottleReasonValues
}

// IsACUpti_EnvironmentClocksThrottleReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUpti_EnvironmentClocksThrottleReason) IsACUpti_EnvironmentClocksThrottleReason() bool {
	for _, v := range _CUpti_EnvironmentClocksThrottleReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUpti_EnvironmentClocksThrottleReason
func (i CUpti_EnvironmentClocksThrottleReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUpti_EnvironmentClocksThrottleReason
func (i *CUpti_EnvironmentClocksThrottleReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_EnvironmentClocksThrottleReason should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_EnvironmentClocksThrottleReasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUpti_EnvironmentClocksThrottleReason
func (i CUpti_EnvironmentClocksThrottleReason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUpti_EnvironmentClocksThrottleReason
func (i *CUpti_EnvironmentClocksThrottleReason) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUpti_EnvironmentClocksThrottleReasonString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUpti_EnvironmentClocksThrottleReason
func (i CUpti_EnvironmentClocksThrottleReason) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUpti_EnvironmentClocksThrottleReason
func (i *CUpti_EnvironmentClocksThrottleReason) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUpti_EnvironmentClocksThrottleReasonString(s)
	return err
}

func (i CUpti_EnvironmentClocksThrottleReason) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUpti_EnvironmentClocksThrottleReason) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUpti_EnvironmentClocksThrottleReasonString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
