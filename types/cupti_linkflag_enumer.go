// Code generated by "enumer -type=CUpti_LinkFlag -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_CUpti_LinkFlagName_0 = "CUPTI_LINK_FLAG_INVALID"
	_CUpti_LinkFlagName_1 = "CUPTI_LINK_FLAG_PEER_ACCESS"
	_CUpti_LinkFlagName_2 = "CUPTI_LINK_FLAG_SYSMEM_ACCESS"
	_CUpti_LinkFlagName_3 = "CUPTI_LINK_FLAG_PEER_ATOMICS"
	_CUpti_LinkFlagName_4 = "CUPTI_LINK_FLAG_SYSMEM_ATOMICS"
	_CUpti_LinkFlagName_5 = "CUPTI_LINK_FLAG_FORCE_INT"
)

var (
	_CUpti_LinkFlagIndex_0 = [...]uint8{0, 23}
	_CUpti_LinkFlagIndex_1 = [...]uint8{0, 27}
	_CUpti_LinkFlagIndex_2 = [...]uint8{0, 29}
	_CUpti_LinkFlagIndex_3 = [...]uint8{0, 28}
	_CUpti_LinkFlagIndex_4 = [...]uint8{0, 30}
	_CUpti_LinkFlagIndex_5 = [...]uint8{0, 25}
)

func (i CUpti_LinkFlag) String() string {
	switch {
	case i == 0:
		return _CUpti_LinkFlagName_0
	case i == 2:
		return _CUpti_LinkFlagName_1
	case i == 4:
		return _CUpti_LinkFlagName_2
	case i == 8:
		return _CUpti_LinkFlagName_3
	case i == 16:
		return _CUpti_LinkFlagName_4
	case i == 2147483647:
		return _CUpti_LinkFlagName_5
	default:
		return fmt.Sprintf("CUpti_LinkFlag(%d)", i)
	}
}

var _CUpti_LinkFlagValues = []CUpti_LinkFlag{0, 2, 4, 8, 16, 2147483647}

var _CUpti_LinkFlagNameToValueMap = map[string]CUpti_LinkFlag{
	_CUpti_LinkFlagName_0[0:23]: 0,
	_CUpti_LinkFlagName_1[0:27]: 2,
	_CUpti_LinkFlagName_2[0:29]: 4,
	_CUpti_LinkFlagName_3[0:28]: 8,
	_CUpti_LinkFlagName_4[0:30]: 16,
	_CUpti_LinkFlagName_5[0:25]: 2147483647,
}

// CUpti_LinkFlagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUpti_LinkFlagString(s string) (CUpti_LinkFlag, error) {
	if val, ok := _CUpti_LinkFlagNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_LinkFlag values", s)
}

// CUpti_LinkFlagValues returns all values of the enum
func CUpti_LinkFlagValues() []CUpti_LinkFlag {
	return _CUpti_LinkFlagValues
}

// IsACUpti_LinkFlag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUpti_LinkFlag) IsACUpti_LinkFlag() bool {
	for _, v := range _CUpti_LinkFlagValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUpti_LinkFlag
func (i CUpti_LinkFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUpti_LinkFlag
func (i *CUpti_LinkFlag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_LinkFlag should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_LinkFlagString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUpti_LinkFlag
func (i CUpti_LinkFlag) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUpti_LinkFlag
func (i *CUpti_LinkFlag) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUpti_LinkFlagString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUpti_LinkFlag
func (i CUpti_LinkFlag) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUpti_LinkFlag
func (i *CUpti_LinkFlag) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUpti_LinkFlagString(s)
	return err
}

func (i CUpti_LinkFlag) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUpti_LinkFlag) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUpti_LinkFlagString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
