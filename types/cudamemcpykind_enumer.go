// Code generated by "enumer -type=CUDAMemcpyKind -json -text -yaml -sql"; DO NOT EDIT.

//
package types

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _CUDAMemcpyKindName = "CUDAMemcpyHostToHostCUDAMemcpyHostToDeviceCUDAMemcpyDeviceToHostCUDAMemcpyDeviceToDevice"

var _CUDAMemcpyKindIndex = [...]uint8{0, 20, 42, 64, 88}

func (i CUDAMemcpyKind) String() string {
	if i < 0 || i >= CUDAMemcpyKind(len(_CUDAMemcpyKindIndex)-1) {
		return fmt.Sprintf("CUDAMemcpyKind(%d)", i)
	}
	return _CUDAMemcpyKindName[_CUDAMemcpyKindIndex[i]:_CUDAMemcpyKindIndex[i+1]]
}

var _CUDAMemcpyKindValues = []CUDAMemcpyKind{0, 1, 2, 3}

var _CUDAMemcpyKindNameToValueMap = map[string]CUDAMemcpyKind{
	_CUDAMemcpyKindName[0:20]:  0,
	_CUDAMemcpyKindName[20:42]: 1,
	_CUDAMemcpyKindName[42:64]: 2,
	_CUDAMemcpyKindName[64:88]: 3,
}

// CUDAMemcpyKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CUDAMemcpyKindString(s string) (CUDAMemcpyKind, error) {
	if val, ok := _CUDAMemcpyKindNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUDAMemcpyKind values", s)
}

// CUDAMemcpyKindValues returns all values of the enum
func CUDAMemcpyKindValues() []CUDAMemcpyKind {
	return _CUDAMemcpyKindValues
}

// IsACUDAMemcpyKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CUDAMemcpyKind) IsACUDAMemcpyKind() bool {
	for _, v := range _CUDAMemcpyKindValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CUDAMemcpyKind
func (i CUDAMemcpyKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CUDAMemcpyKind
func (i *CUDAMemcpyKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUDAMemcpyKind should be a string, got %s", data)
	}

	var err error
	*i, err = CUDAMemcpyKindString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CUDAMemcpyKind
func (i CUDAMemcpyKind) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CUDAMemcpyKind
func (i *CUDAMemcpyKind) UnmarshalText(text []byte) error {
	var err error
	*i, err = CUDAMemcpyKindString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CUDAMemcpyKind
func (i CUDAMemcpyKind) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CUDAMemcpyKind
func (i *CUDAMemcpyKind) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CUDAMemcpyKindString(s)
	return err
}

func (i CUDAMemcpyKind) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *CUDAMemcpyKind) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CUDAMemcpyKindString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
