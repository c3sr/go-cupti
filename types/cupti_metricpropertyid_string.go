// Code generated by "enumer -type=CUpti_MetricPropertyID -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const _CUpti_MetricPropertyID_name = "CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT"

var _CUpti_MetricPropertyID_index = [...]uint8{0, 42}

func (i CUpti_MetricPropertyID) String() string {
	if i < 0 || i >= CUpti_MetricPropertyID(len(_CUpti_MetricPropertyID_index)-1) {
		return fmt.Sprintf("CUpti_MetricPropertyID(%d)", i)
	}
	return _CUpti_MetricPropertyID_name[_CUpti_MetricPropertyID_index[i]:_CUpti_MetricPropertyID_index[i+1]]
}

var _CUpti_MetricPropertyIDNameToValue_map = map[string]CUpti_MetricPropertyID{
	_CUpti_MetricPropertyID_name[0:42]: 0,
}

func CUpti_MetricPropertyIDString(s string) (CUpti_MetricPropertyID, error) {
	if val, ok := _CUpti_MetricPropertyIDNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_MetricPropertyID values", s)
}

func (i CUpti_MetricPropertyID) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CUpti_MetricPropertyID) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_MetricPropertyID should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_MetricPropertyIDString(s)
	return err
}
