// Code generated by "enumer -type=CUpti_ActivityUnifiedMemoryAccessType -json"; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

const _CUpti_ActivityUnifiedMemoryAccessType_name = "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWNCUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READCUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITECUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMICCUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCH"

var _CUpti_ActivityUnifiedMemoryAccessType_index = [...]uint8{0, 49, 95, 142, 190, 240}

func (i CUpti_ActivityUnifiedMemoryAccessType) String() string {
	if i < 0 || i >= CUpti_ActivityUnifiedMemoryAccessType(len(_CUpti_ActivityUnifiedMemoryAccessType_index)-1) {
		return fmt.Sprintf("CUpti_ActivityUnifiedMemoryAccessType(%d)", i)
	}
	return _CUpti_ActivityUnifiedMemoryAccessType_name[_CUpti_ActivityUnifiedMemoryAccessType_index[i]:_CUpti_ActivityUnifiedMemoryAccessType_index[i+1]]
}

var _CUpti_ActivityUnifiedMemoryAccessTypeNameToValue_map = map[string]CUpti_ActivityUnifiedMemoryAccessType{
	_CUpti_ActivityUnifiedMemoryAccessType_name[0:49]:    0,
	_CUpti_ActivityUnifiedMemoryAccessType_name[49:95]:   1,
	_CUpti_ActivityUnifiedMemoryAccessType_name[95:142]:  2,
	_CUpti_ActivityUnifiedMemoryAccessType_name[142:190]: 3,
	_CUpti_ActivityUnifiedMemoryAccessType_name[190:240]: 4,
}

func CUpti_ActivityUnifiedMemoryAccessTypeString(s string) (CUpti_ActivityUnifiedMemoryAccessType, error) {
	if val, ok := _CUpti_ActivityUnifiedMemoryAccessTypeNameToValue_map[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CUpti_ActivityUnifiedMemoryAccessType values", s)
}

func (i CUpti_ActivityUnifiedMemoryAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CUpti_ActivityUnifiedMemoryAccessType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CUpti_ActivityUnifiedMemoryAccessType should be a string, got %s", data)
	}

	var err error
	*i, err = CUpti_ActivityUnifiedMemoryAccessTypeString(s)
	return err
}
