// Code generated by fileb0x at "2019-06-20 00:23:51.840422511 +0000 UTC m=+0.003042656" from config file "b0x.yml" DO NOT EDIT.
// modification hash(ff08bea98d746c0cdac342aba1299f2a.90b27eb7f67e71e30d95593145408bb3)

package cupti

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileEventMappingJSON is "/event_mapping.json"
var FileEventMappingJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x9c\x5f\x6f\xdb\x38\x12\xc0\xdf\xfb\x29\x06\x79\xb8\xa7\x34\x10\x25\x5b\x76\xf6\x2d\xc8\xe6\x7a\x01\x9a\x76\xd1\x78\x0f\x58\x1c\x0e\x02\x2d\xd1\x96\x50\x49\xf4\x92\x74\x13\xdf\xe1\xbe\xfb\x41\x7f\xdc\xd8\xc9\x58\x26\x69\x51\x75\x81\x7d\x4c\x3c\x43\x9b\xbf\x19\x0d\x67\xc8\x11\xff\xf5\x0e\xe0\xbf\xef\x00\x00\x2e\xd8\x37\x56\xaa\x8b\x5f\x80\x5c\x36\x7f\x67\x49\xf5\x87\xe7\x85\x61\x10\x5c\x7b\xed\x3f\x13\x5e\xd0\xac\x8c\xea\xcf\x7c\xef\x7a\x42\xc6\xbe\xdf\x7e\x54\xd2\x82\x5d\xfc\x02\x17\x34\x56\xd9\x37\x16\xc5\x9b\x38\x67\x32\x5a\x15\x17\xed\xe7\x32\xe5\x42\x45\x09\x93\xb1\xc8\x56\x2a\xe3\xe5\x8b\x30\x34\xc2\xf0\x22\x9c\xf3\x72\xf9\x5a\xf6\xd3\xba\x98\x33\x01\x7c\xb1\x15\xa7\x50\xac\x73\x95\xad\x04\x8f\x99\x94\x5c\x40\x4a\x25\x50\x05\x39\xa3\x52\x01\x2f\x19\xb4\xc3\x3f\x51\xb1\xba\xda\x0e\x1d\x53\xc5\x96\x5c\x6c\xaa\x21\x6f\x7f\xff\x6d\x76\x1f\xdd\xfd\xf3\xee\xd3\x2c\xba\xbd\x99\xdd\x7d\xf8\xfc\xe5\x8f\xe8\xfe\xd3\xe3\xec\xcb\xef\xb7\xb3\xfb\xcf\x9f\x2e\xde\x01\xfc\xef\xf2\x2d\x23\x1f\x63\x44\x8c\x19\x55\xbf\x4b\x17\x51\x2d\x7b\x84\xd0\x4d\x1c\xaf\x8b\x75\x4e\x15\x4b\xa0\xfc\x4e\x6b\x7f\x00\x26\x1a\x7c\x57\xf0\x77\x2e\x80\x7d\x63\x62\xd3\xfc\x03\x32\x05\x59\x19\x0b\x56\xb0\x52\x49\x98\x6f\x40\xa5\xec\xd0\x30\x59\x59\x7f\xda\x28\x3e\xa5\x59\x9c\x42\x4c\x4b\x98\xb3\xed\x27\x82\x96\x4b\x06\x1e\x28\x0e\xe1\xa8\x57\xf6\x01\xc2\x7e\x3a\xd6\x67\x2f\x53\x2a\x58\x12\xe5\x49\xa4\x04\x2d\x65\x35\x2d\x5e\xca\x4e\x13\x74\xab\x74\xfb\xea\xae\x06\x2c\xb8\x80\x66\x30\xc8\x39\x4d\x80\xc6\x95\xe7\x32\x79\x05\x0f\xf4\x39\x2b\xd6\xc5\xae\x38\xc8\xec\x3f\x35\xcf\x6f\x3c\x57\x14\x32\x09\xc4\x9f\xc2\x7c\xa3\x98\xbc\x04\x5a\x6e\x6a\x53\xb4\x43\x64\xe5\x12\x0a\x2e\x18\xa8\x94\x96\x2f\x72\xf0\x94\xe5\x39\xc4\x74\x2d\x59\xfb\xac\xe4\xec\xed\x2f\xa2\x7b\xbf\x29\x2b\xa5\x12\xeb\xfa\xe3\x2b\x98\xa5\x99\x04\x9a\x4b\x5e\xb9\x46\xbe\x4e\x98\x04\xf6\xac\x04\xdd\x1f\xa4\xfe\x82\xa4\x72\x99\x76\xa0\x39\x2d\xbf\x42\xcc\xcb\x45\x9e\xc5\x4a\xea\x9b\xff\xf6\xe6\xf6\x1f\x77\x87\x0c\x3f\xc2\x0c\x1f\x1a\x1b\x5e\x2a\x63\xc3\x1f\x50\xb1\x33\xbc\x54\x95\x9d\xce\xcc\xf2\xcd\x8f\x3a\x5b\xd3\x8f\x11\xd3\x8f\x0c\x9e\x79\x96\xd3\x95\x64\xc9\x76\x51\x92\xdd\x11\xb7\x95\x86\x38\xe7\xf1\xd7\x4e\x6b\xe3\x92\x7d\x44\xb9\x10\x5b\x61\x7c\xeb\x19\xaf\x4c\x66\x0c\xbc\x84\xc7\x07\xfd\x79\xef\xcb\xf7\x31\xfb\x09\x36\xfb\x40\x7f\xf6\x95\x23\x47\xec\x99\xc5\x6b\xc5\x92\x68\xb1\x22\x61\xb4\xca\x56\x2c\x92\x5e\x27\x86\xe3\x6a\xdd\x8f\x7c\xfd\x58\xee\x3c\x44\xd5\x13\xd3\x0c\x56\x3d\x20\xd5\x78\x50\x8d\xd7\xf0\x02\xb9\x9e\xbf\x5f\x51\xa1\xb2\xfa\x91\xf7\x7a\x5d\x24\xa7\x18\xc0\x51\x0f\x00\x89\x1d\x40\xe2\x1e\x20\xe9\x93\xdf\x35\xc6\x6f\xdc\x03\x3f\xdf\x8e\x9f\xef\x9e\x9f\xdf\x27\x3f\xe2\x61\x00\xc3\x1e\x00\x06\x76\x00\x03\xf7\x00\x83\x5e\x01\xa2\x65\xd8\xc4\x1e\x60\x38\xb2\x0a\x81\x6f\xd5\x4e\x03\x18\x8e\x3a\x42\x60\xaf\x00\xd1\x1a\x6d\xda\x03\x40\x62\x07\x90\xb8\x07\xd8\x6b\x08\x24\x58\xa1\x75\x7d\xdd\x03\x40\xdf\x0e\xa0\xef\x1e\x60\xbf\x31\x10\x29\x58\x46\x9e\xd7\x03\xc0\xc0\x0e\x60\xe0\x1e\x60\xbf\x31\x70\x8c\x01\x24\xd6\x00\x0b\x6a\x13\x02\xdf\x6a\x9d\x84\xaf\xa0\x43\x05\xc0\x10\xa3\xe7\x9f\x4e\x8f\x58\xd1\x23\xce\xe9\xf5\x1b\xfd\x26\x18\xbd\xe0\x74\x7a\xbe\x15\x3d\xdf\x39\xbd\x7e\x43\xdf\x14\xa3\x37\x3a\x9d\x5e\x60\x45\x2f\x70\x4e\xaf\xdf\xb8\x87\x55\x1f\xd3\x89\xcd\x16\xe7\x9c\x96\x5f\xa3\xed\x6e\x4c\x27\xbb\xc7\x9d\x2d\xc0\xbd\x3d\x1c\x3d\x76\xf2\x90\x3a\x2c\x59\xc9\x44\xbd\x25\xfd\x94\xb2\x66\x73\x98\x26\x89\xa8\x77\xbf\xea\x4d\x28\xf5\xc4\x81\x8b\x66\x13\xab\x1d\xa6\x60\x05\x17\x9b\x66\x34\xc1\xfe\x5c\x33\xa9\x24\x2c\x68\x9e\x6f\xb7\x97\x25\x2d\xd8\x56\xaa\xfa\xba\x9e\xf6\x99\x7c\xac\x6c\x99\x4e\x6d\xf6\x18\x8d\xc9\x37\x5b\x70\xf6\xe8\x11\xfd\x53\xd8\x37\xc3\x0d\x0a\x9f\x60\x41\xc3\xa0\xe8\x56\xac\x94\x5c\x34\xcf\xfc\xfe\x29\xd4\x91\x15\x5f\x47\x51\xeb\x44\xea\x29\x65\x82\x41\x33\x5c\x13\x2c\x9e\xa8\xdc\x9e\x9c\xf0\x12\x1c\x2f\xf9\xbe\x8f\x11\x0c\x7b\x21\x48\x6c\x09\x12\xc7\x04\x7b\x5d\xf6\xfd\x00\x23\x38\xe9\x85\xa0\x6f\x4b\xd0\x77\x4c\xb0\xd7\xa5\xdf\x47\xab\x9e\x69\x2f\x04\x03\x5b\x82\x81\x63\x82\xfd\x2e\xff\xc8\x1a\xd4\x51\xf5\x7c\x3f\x07\xd9\x02\x5c\xcc\x23\xb9\x9e\xaf\xbc\x48\x30\x9a\x44\x92\xc5\x8a\x8b\xee\x63\xae\xc5\x1c\x6a\x0d\xa8\x34\xe0\x95\x46\x37\xb2\x5f\xbf\xdc\x3c\x34\x6a\xdf\x97\x0a\xc5\xab\xd1\x60\x27\xc6\x5d\xbe\x3a\x58\x26\xf5\xda\x13\xf8\xf5\x51\x55\x7b\x8e\xa5\xbf\x88\x3c\xdc\x3d\x7c\xfe\xf2\x87\xc9\xd1\x7c\x47\xd5\x73\x88\x1e\x31\xa6\x47\x1c\xd1\x23\x43\xd2\xc3\xf6\x7c\x3a\xaa\x9e\xc3\xbe\xf7\x24\x32\xc5\xcc\x9c\xaf\x56\xb1\xe0\xd7\xe8\x9d\x89\xfb\x61\x87\xd4\x1d\x85\xcf\x61\xf7\x33\x06\x48\x9c\x01\x1c\xd4\x03\xb1\xe8\x37\x39\xbc\x69\x36\x0e\xba\xda\x8f\x3a\xb9\xdd\xec\xf6\x1e\xb9\x6b\x3c\x72\xdd\x77\x34\x21\xc6\x70\xea\x1e\x1e\x1d\x36\x7b\x82\x7f\x75\x1c\xed\x50\x1f\x87\xfa\xd4\x57\x82\x2f\x22\x25\xb2\xe5\x92\x89\xc8\xeb\x2e\x45\x56\x45\x25\xa8\x59\x75\x34\xc2\x07\xb6\x2c\x9a\x2c\xe6\xbe\x28\x48\x08\x7f\x03\xef\xd9\xf3\xbc\x5e\x53\x65\x2c\xd2\x8d\x27\xb6\x54\x88\x06\x15\xe2\x86\x4a\xaf\xe9\x2f\xd6\xa9\x32\x9e\xda\x52\xf1\x35\xa8\xf8\x6e\xa8\x8c\x5c\x77\xb3\x8c\xaf\x6d\xa9\x04\x1a\x54\x02\x37\x54\xa6\xae\xbb\x5c\x42\xcf\x96\xca\x48\x83\xca\xc8\x09\x15\xe2\xb9\x6e\x5d\x09\x89\x2d\x95\xb1\x06\x95\xb1\x13\x2a\xbe\xe7\xba\x21\x25\xf4\x6d\xa9\x84\x1a\x54\x42\x27\x54\x46\x9e\xf3\x36\x93\x30\xb0\xc5\x32\xd1\xc0\x32\x71\x82\x65\xea\x39\x6f\x1e\x09\xc7\xfa\x58\xea\x83\x94\x4c\xca\x35\x4b\xba\xd3\x95\xfb\x97\xf9\x41\xc9\x15\x34\x3a\x46\xc9\xb4\x4a\xa9\x82\x24\x4b\x5e\xf4\xeb\x16\xd7\x1d\x72\x7b\xe5\x47\x95\x4e\xf6\xde\xcf\x8f\x36\x8b\x84\xa1\x15\x30\xa2\x0d\xcc\x16\x56\xa3\x07\x32\x2b\x97\x39\x1b\x18\x14\x96\x0b\x87\x13\x43\x50\xdb\x07\x41\x9b\xd4\x6b\x85\x6e\x56\xf8\x43\xe7\x86\x07\x96\x05\x87\x06\xf9\x9e\x4a\xeb\x7d\x26\x7d\x2c\xb3\x17\x85\x3e\xe9\xb4\xc5\x57\x5b\x72\x35\xbf\x4a\xb6\x15\x1b\x8d\xd3\x5d\xad\xb7\x65\xdb\x4b\xc9\xd6\x2a\x5e\xb6\x3d\xe3\x59\xb9\x84\x95\x60\x49\x56\xb1\x4e\xde\xf3\xc5\x8e\x44\xed\xca\xed\xf7\xd7\xdf\xbd\xd7\x7d\x7e\xaf\x20\xe1\x4c\x36\x41\xa1\xe9\x3f\x07\xc1\x56\x39\xdd\xc8\x2b\xd7\x3d\x26\x41\x68\x90\x9a\x96\x5c\x45\x2f\x53\x8c\xf8\x62\x11\x19\xdb\xf4\x13\x57\x3b\x98\xe0\x05\x13\xb8\x35\x33\x2d\x9b\xa8\x8b\x7e\xb7\x85\xf5\xf7\x86\x2d\xdf\xe3\xc3\x9e\x8b\xe1\xb1\x9a\x64\x62\x10\xc9\xea\xb3\xd5\x2c\x8e\x72\x4e\xbb\xad\xfb\xa1\x11\x84\x5d\xc1\x6e\xdb\x7d\xfc\x15\x37\x9f\xeb\x06\x97\x60\x32\x35\x9f\x7f\x7d\x50\xac\x05\x60\x4f\xb2\x9b\xc0\xe3\x6c\x00\x02\x58\xa5\x31\x35\x48\x1e\xa9\xe2\x45\x14\xf3\x75\xd9\x7d\xbe\x7f\xa3\x78\x01\x7b\x62\xdd\x73\xbf\x99\x7d\x7e\x18\x60\xf6\x68\x93\x89\x41\xe0\x5b\xe6\x7c\x4e\xf3\xa8\x81\x40\xbb\xb7\x13\x3f\xd4\xb2\x50\xc9\x5e\xc5\x54\x9a\xd2\xb8\xba\xbd\x79\x74\x4f\x04\x6f\xfe\x18\x19\x10\x11\x2c\xd1\xf0\x87\x0f\x82\x25\x26\x04\xbe\xdc\x0d\x10\x0e\x7c\x74\xdf\xdd\xdc\x1d\x8e\x47\xc3\xc6\x15\x4c\x82\xe1\x87\x01\xa6\x8f\x15\x00\x53\xcf\x78\xfa\x1a\xc1\xb0\x99\xbf\x51\x2c\x1c\x02\x00\xfa\x5a\xad\xc1\xb6\x4b\xce\x63\x1d\xf3\x7f\xac\xc4\x8c\xac\xff\x71\x80\xc9\xa3\xaf\x96\xfa\xa6\x93\x3f\x6e\xfc\x66\xf6\x46\xb6\x1f\x62\xfa\x58\x0e\x3c\x31\x98\x7e\xdb\xf5\x56\x85\x77\x9d\x4e\xb7\x5d\x39\xad\xd6\xb6\x6a\x0d\x18\x62\x01\x40\x53\xc2\x91\x15\x87\xa3\x4b\xe2\x0e\x0b\xd8\x91\xd5\xe7\x31\xd0\xa2\x88\xa6\x89\x63\x63\x26\x47\x03\xc3\x4e\xff\xa9\x6e\x64\x18\x62\xfa\x58\x8e\x38\x09\x8d\xa7\x7f\x3c\x34\xec\x76\x81\xea\xc6\x86\x21\x00\xa0\x1b\xcf\x06\xcf\x44\x73\xc7\x45\x4e\xd7\x65\x9c\x1e\x29\x83\x71\xd1\xe3\x3d\xdb\x12\x5e\xeb\x9c\xda\x05\x83\x65\x82\x13\x83\xca\x40\x16\x51\xac\xa8\xde\xac\x0f\xc8\x1e\xd9\x0e\x54\xb4\xf7\x59\xa3\x7d\x67\x87\x9f\xf4\xd1\xe4\xf5\x22\xe8\x23\xbd\x3f\x51\x91\x49\x79\xa4\x11\x23\xf7\x91\x0e\x20\xd8\x57\x3c\xe2\x05\xfb\x1d\x2c\x92\x95\x0a\x14\x6f\xba\x5b\x16\x82\x17\x20\xf3\x2c\x66\xe0\xd5\x71\xc3\x87\x98\xc6\x29\x6b\x6f\x38\xc0\x3a\x5b\xea\x3d\x8f\xc0\x7f\x6f\xd5\xde\xd2\xdd\xe3\x8c\x31\x0e\x8d\x19\x13\x5b\xc6\xc4\x39\x63\xf2\xc3\x19\xa3\x3d\x6c\xd7\x16\x7e\xbc\xd3\x01\x68\xe4\xc6\x3b\x7d\x80\x46\x84\xf7\x1b\x01\xcf\xd7\x89\xb1\x6c\x99\x78\x16\x4e\x6c\x07\x98\x38\x06\xfc\xe3\x3d\x18\xcb\xc7\x49\x60\xeb\xc1\x8a\x3d\x6f\x21\xff\xb9\x66\x22\x33\x72\x63\xc5\x9e\xb7\xa4\x5f\x29\x9b\xa0\xae\xe9\xce\xd8\xb3\x5a\x0b\xd6\x70\xad\xbb\x0c\xcf\xc4\x9f\xb1\xb4\x9f\x4c\xac\x17\x3e\x5b\xde\x4d\x80\xb5\x05\xfe\x2a\x3c\x9f\x37\x71\xac\xa8\xf0\xc9\x29\x0e\x9e\x66\x4a\xab\x59\xf6\xad\x77\xa7\x99\x32\xeb\x99\x3d\xee\xda\x29\x55\xf5\xb0\x59\x79\x36\xc4\xb1\x3a\xc6\x1f\x9f\xe4\xe3\xc6\xc8\x5f\x1c\xdc\x98\xb9\x86\x77\x9f\x21\x74\xac\x76\x0a\x26\xd6\x99\xc8\x46\x16\xac\x30\x0b\x2d\xda\xfa\x47\xf6\x1d\x36\x52\xb1\x62\xfb\xce\xdf\xdb\x17\x16\xce\x84\x37\xda\x0e\x34\x22\xf6\x25\x8c\x3d\x71\x8d\x01\x4c\x90\x23\x2d\xfa\xe7\xc2\x1c\x2b\x1b\x7d\x9b\x74\x5b\x71\x45\xf3\xbd\x9c\xd0\x88\xf8\x51\x75\x8c\xf7\xac\x52\x32\x74\xe8\xe6\x2e\xbc\xfd\x58\x04\x1f\xc9\xe5\x7e\x40\xba\xdc\xb7\xe0\x8f\xb1\x0d\x56\x6e\x06\x81\xb5\x6d\xf6\x8a\x4e\x0b\xe3\x74\xe9\x1f\xb6\x8e\xa1\xef\xff\x44\xe6\xc1\x2a\x55\x32\xb2\x2d\xa4\xec\xf2\x4e\x32\x54\x9e\xff\xe3\xcb\x2a\xb4\x59\x8b\x4c\xad\x77\x5f\x6c\x81\x0f\x96\xe8\x9f\x01\x72\xac\x94\xf5\xfd\x53\x5c\xdc\x30\xed\x24\xc3\x66\xfa\x67\x80\x1c\x2b\x67\xfd\xf0\x24\x2f\x37\x66\x3e\x70\xaa\x7f\x06\xd4\xb1\x92\x36\x98\x5a\x6f\x8a\xd9\x66\x9e\x64\x98\x5c\xff\x0c\x80\x63\x15\xed\xc8\xb7\xdf\x4a\xb7\x27\x3e\x50\xae\x7f\x06\xcc\xd1\x82\xd6\x66\xe7\xf7\xa4\x5c\x9f\x38\xc8\xf5\xc9\xcf\x9e\x4c\xa2\xdd\x6b\xc1\xc8\xda\x36\xb6\xb9\x3e\x71\x92\xeb\xff\xf4\xe6\x41\xef\x36\xea\xa8\x92\xbd\xd7\x2f\x2a\xc5\x19\x8b\xd4\xf3\xf6\x62\x93\xd5\x3a\x97\xdd\xfd\x04\x5d\x0a\x47\x5e\x5d\xaa\x44\x9b\xeb\xa1\x9a\xf7\xac\x13\xaa\xda\x5b\xdf\x8b\x4c\xca\x8c\x97\xa0\x52\xc1\xd7\xcb\x14\x7e\xbb\xbd\xdf\xbd\x1c\xc5\xe1\x1d\x1e\xa3\xae\x03\x26\x14\x96\x30\x85\x25\xfa\x83\x25\x58\xcc\xda\xf7\x28\x5c\x72\xc2\x9c\x8a\x74\x2c\x81\xc7\xae\xc5\xdf\x48\x9d\x5b\xe2\x11\xf1\xae\x3b\xe2\xdb\x67\xaf\xbd\x22\xdf\xc4\xe2\x44\x7f\x26\xaf\xee\xfb\x39\x32\x91\x83\xd2\x9a\xef\x60\xb1\xed\xa4\xb2\xef\xd7\x02\x3d\x65\x2a\x85\x27\x2e\xbe\xd6\x0d\x4c\xd5\x2c\xdf\xfd\xfb\xdd\xff\x03\x00\x00\xff\xff\xbf\xa7\xb0\xc4\x5e\x67\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileEventMappingJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "/event_mapping.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
